%% get path
currentpath = pwd;
currentfolder = strsplit(currentpath,filesep);
while ((~strcmp(currentfolder{end}, 'EMS-aircraft')) && ...
    (~strcmp(currentfolder{end}, 'EMS-aircraft-main')) && ...
    ~isempty(currentfolder{end}))
    currentpath = fileparts(currentpath);
    currentfolder = strsplit(currentpath,filesep);
end
projectpath = currentpath;
addpath(genpath(projectpath));

%% get data
load load_to_train
cl_inputs = [];
cl_outputs = [];
inputs = [];
outputs = [];
outputs_number = [];
inputs_cell_arr = {};
outputs_cell_arr = {};
outputs_number_cell_arr = {};

all_l = cellfun('length',XTrain);
ml = max(all_l);

tot = length(XTrain);
% tot = 1;
l1 = 4;
Ts = 1e-2;
for i=1:tot
    add = ml - all_l(i);
    to_add = zeros(1,add);
    cl_inputs = [cl_inputs; [to_add XTrain{i}]];
    to_add_2 = categorical(repelem("takeoff",add));
    cl_outputs = [cl_outputs;[to_add_2 YTrain{i}]];
    t = [0];
    w = [0];
    c = ["takeoff"];
    classes = unique(cl_outputs);
    for j = 1:l1
        label = classes(j);
        idx = find(cl_outputs(i,:) == label);
        temp_t = idx;
        tt = temp_t(1):1e-2:temp_t(end);
        temp_w = cl_inputs(i,idx);
        w = [w fixpt_interp1(temp_t,temp_w,tt,float('single'),[],float('single'),...
            [],'Floor')];
        c = [c repelem(label,length(tt))];
        t = [t tt];
    end
    inputs = [inputs; w];
    outputs = [outputs; c];
    [Aval, ~, indAval] = unique(c);
    Avalnew = [1; 2; 3; 4];
    Anew = Avalnew(indAval);
    c_n = reshape(Anew, size(c));
    outputs_number = [outputs_number; c_n];
    inputs_cell_arr{i} = w;
    outputs_cell_arr{i} = c;
    outputs_number_cell_arr{i} = c_n;
end



%% variations
var_w = {};
var_c = {};
for k=1:length(inputs_cell_arr)-15    
    % narx nn
    temp = num2cell(inputs_cell_arr{k},1);
    var_w = [var_w temp];
    temp_out = outputs_cell_arr{k};
    [Aval, ~, indAval] = unique(outputs_cell_arr{k});
    Avalnew = [1; 2; 3; 4];
    Anew = Avalnew(indAval);
    temp_out = reshape(Anew, size(temp_out));
    temp = num2cell(temp_out,1);
    var_c = [var_c temp];

end
test_var_w = cell2mat(var_w);
test_var_c = cell2mat(var_c);



%% Time delay Neural Network
% Solve an Input-Output Time-Series Problem with a Time Delay Neural Network
% Script generated by Neural Time Series app.
% Created 17-Sep-2021 11:01:35
%
% This script assumes these variables are defined:
%
%   var_w - input time series.
%   var_c - target time series.

X = var_w(1:10:end);
T = var_c(1:10:end);

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Time Delay Network
inputDelays = 1:20;
hiddenLayerSize = 20;
net = timedelaynet(inputDelays,hiddenLayerSize,trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Prepare the Data for Training and Simulation
% The function PREPARETS prepares timeseries data for a particular network,
% shifting time by the minimum amount to fill input states and layer
% states. Using PREPARETS allows you to keep your original time series data
% unchanged, while easily customizing it for networks with differing
% numbers of delays, with open loop or closed loop feedback modes.
[x,xi,ai,ttt] = preparets(net,X,T);

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'time';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean Squared Error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate', 'ploterrhist', ...
    'plotregression', 'plotresponse', 'ploterrcorr', 'plotinerrcorr'};

% Train the Network
[net,tr] = train(net,x,ttt,xi,ai);

% Test the Network
y = net(x,xi,ai);
e = gsubtract(ttt,y);
performance = perform(net,ttt,y)

% Recalculate Training, Validation and Test Performance
trainTargets = gmultiply(ttt,tr.trainMask);
valTargets = gmultiply(ttt,tr.valMask);
testTargets = gmultiply(ttt,tr.testMask);
trainPerformance = perform(net,trainTargets,y)
valPerformance = perform(net,valTargets,y)
testPerformance = perform(net,testTargets,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotresponse(t,y)
%figure, ploterrcorr(e)
%figure, plotinerrcorr(x,e)

% Step-Ahead Prediction Network
% For some applications it helps to get the prediction a timestep early.
% The original network returns predicted y(t+1) at the same time it is
% given x(t+1). For some applications such as decision making, it would
% help to have predicted y(t+1) once x(t) is available, but before the
% actual y(t+1) occurs. The network can be made to return its output a
% timestep early by removing one delay so that its minimal tap delay is now
% 0 instead of 1. The new network returns the same outputs as the original
% network, but outputs are shifted left one timestep.
nets = removedelay(net);
nets.name = [net.name ' - Predict One Step Ahead'];
view(nets)
[xs,xis,ais,ts] = preparets(nets,X,T);
ys = nets(xs,xis,ais);
stepAheadPerformance = perform(nets,ts,ys)

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(x,xi,ai);
end
if (false)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    x1 = cell2mat(x(1,:));
    xi1 = cell2mat(xi(1,:));
    y = myNeuralNetworkFunction(x1,xi1);
end
if (true)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net,1e-2);
end
if (true)
    save('net_to_test_online','net');
end